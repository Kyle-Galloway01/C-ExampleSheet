C# Basics Cheat Sheet
---------------------

1. Introduction to C#:
   - C# (pronounced as "C sharp") is a modern, general-purpose programming language developed by Microsoft.
   - It is a statically typed language designed for building robust, scalable applications targeting the .NET framework.
   - C# is widely used for developing various types of software, including desktop applications, web applications, mobile apps, games, and more.

2. Getting Started:
   - Install Visual Studio or Visual Studio Code, which are popular integrated development environments (IDEs) for C# development.
   - Create a new C# project in Visual Studio or Visual Studio Code to start writing C# code.

3. Basic Syntax:
   - C# syntax is similar to C, C++, and Java, making it relatively easy to learn for programmers familiar with those languages.
   - C# code is organized into classes, methods, statements, and expressions.
   - Each statement ends with a semicolon (;).

4. Variables and Data Types:
   - Variables are used to store data in memory during program execution.
   - C# is a statically typed language, meaning you must declare the type of each variable before using it.
   - Common data types in C# include:
     - int (integer)
     - double (floating-point number)
     - string (text)
     - bool (boolean, true or false)
   - Example: 
     ```csharp
     int age = 30;
     double height = 6.2;
     string name = "John";
     bool isAdult = true;
     ```

5. Control Flow:
   - Conditional Statements:
     - if-else statement: Executes a block of code based on a condition.
     - switch-case statement: Selects one of many blocks of code to execute.
   - Loops:
     - for loop: Executes a block of code a specified number of times.
     - while loop: Executes a block of code while a specified condition is true.
     - do-while loop: Executes a block of code at least once, then repeats as long as a specified condition is true.
   - Example:
     ```csharp
     if (age >= 18)
     {
         Console.WriteLine("You are an adult.");
     }
     else
     {
         Console.WriteLine("You are a minor.");
     }

     for (int i = 0; i < 5; i++)
     {
         Console.WriteLine("Count: " + i);
     }
     ```

6. Arrays and Collections:
   - Arrays: 
     - Stores a fixed-size sequential collection of elements of the same type.
     - Accessed using zero-based index.
   - Lists:
     - Dynamic arrays that can grow or shrink in size.
     - Provides methods for adding, removing, and accessing elements efficiently.
   - Example:
     ```csharp
     int[] numbers = { 1, 2, 3, 4, 5 };
     List<string> names = new List<string>() { "Alice", "Bob", "Charlie" };
     ```

7. Methods and Functions:
   - Methods are blocks of code that perform a specific task and can be called multiple times.
   - Functions are methods that return a value.
   - Methods can have parameters and return types.
   - Example:
     ```csharp
     int Add(int a, int b)
     {
         return a + b;
     }
     ```

8. Object-Oriented Programming (OOP):
   - Classes and Objects:
     - Classes are blueprints for creating objects.
     - Objects are instances of classes that represent real-world entities.
   - Encapsulation:
     - Encapsulates the data (attributes) and methods (behaviors) of a class into a single unit.
     - Access modifiers (public, private, protected, internal) control the visibility and accessibility of class members.
   - Inheritance:
     - Allows a class (derived class or subclass) to inherit properties and behavior from another class (base class or superclass).
   - Polymorphism:
     - Enables objects to take on multiple forms based on their context.
     - Achieved through method overriding and method overloading.
   - Example:
     ```csharp
     class Person
     {
         private string name;
         public Person(string name)
         {
             this.name = name;
         }
         public void SayHello()
         {
             Console.WriteLine("Hello, my name is " + name);
         }
     }
     ```

9. Asynchronous Programming:
   - Asynchronous programming allows you to perform tasks concurrently without blocking the main thread.
   - async and await keywords are used to define asynchronous methods and await asynchronous operations.
   - Task and Task<T> types represent asynchronous operations.
   - Example:
     ```csharp
     async Task<string> DownloadDataAsync(string url)
     {
         HttpClient client = new HttpClient();
         return await client.GetStringAsync(url);
     }
     ```

10. Serialization and Deserialization:
    - Serialization is the process of converting objects into a stream of bytes for storage or transmission.
    - Deserialization is the process of converting a stream of bytes back into objects.
    - JSON and XML are common serialization formats.
    - Example:
      ```csharp
      [Serializable]
      public class Person
      {
          public string Name { get; set; }
          public int Age { get; set; }
      }
      ```

